#!/usr/bin/env groovy

// This file was generated by the CI/CD Wizard version 1.0.375.
// See the user guide for information on how to customize and use this file.

pipeline {
    environment {
        DEMO_V = "demo_simple_d3c"
        MPLABX_ROOT = "/opt/microchip/mplabx"
        MPLABX_V_2_USE = "v6.00.06.5453"
        MPLABX_EXE = "mplab_ide"
         //-SL: /opt/microchip/mplabx/v6.00.06.5453/mplab_platform/bin/mplab_ide
        MPLABX_EXE_2_USE = "${MPLABX_ROOT}" + "/" + "${MPLABX_V_2_USE}" + "/mplab_platform/bin/" + "${MPLABX_EXE}"
         //-SL: /opt/microchip/mplabx/v6.00.06.5453/mplab_platform/bin/xclm
        XCLM_EXE = "xclm"
        XCLM_EXE_2_USE   = "${MPLABX_ROOT}" + "/" + "${MPLABX_V_2_USE}" + "/mplab_platform/bin/" + "${XCLM_EXE}"
         //-SL: /opt/microchip/xc32/v2.50/bin/xc32-gcc
        XC32_ROOT = "/opt/microchip/xc32"
        XC32_V_2_USE = "v2.50"
        XC32_GCC_EXE = "xc32-gcc"
        XC32_GCC_2_USE = "${XC32_ROOT}" + "/" + "${XC32_V_2_USE}" + "/bin/" + "${XC32_GCC_EXE}"       
         //-SL: see <https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables>
         //-SL:  which env-variables are known
         //-SL:  eg ${env.WORKSPACE} points to '/var/lib/jenkins/nodes/DEM-LT-M16422u_localJenkinsAgent/workspace/J_test3/'
         //-SL:   for Node/Agent/Slave/Client 'J_test3' created in Jenkins-Master/-Server
        PRJ_DIR_N=   "CICDgh_samd21xplp"
         //-SL: path-2-MPLABX-prj.X relative from Jenkins-Workspace as scripts below first cd's into WS
        PRJ_X_NAME =   "CICDgit_samd21xplp.X"
        PRJ_WS_REL_P = "./" + "${PRJ_DIR_N}" + "/firmware/" + "${PRJ_X_NAME}"
        MPLABX_CFG_N = "samd21xplp"
        PRJ_MK_STR =   "${PRJ_WS_REL_P}" + "@" + "${env.MPLABX_CFG_N}"
         //-SL: simple bash-scrp to find *.elf-file and print path+name
        ELF_TEST_SCR = "./" + "result_check.sh"
    }
    
    //agent any
     //- use same label for all stages
    agent {label 'DEM-LT-M16422u_localLnxPC'}
    
    stages {
        
        stage('Build') {
//            agent {label 'DEM-LT-M16422u_localLnxPC'}
            
            steps {
                 sh(
                    label: 'environment check',
                    script: """
                            echo "========================================================================"
                            echo "Running Jenkins-Pipeline ${env.DEMO_V}"
                            echo "========================================================================"
                            echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                            echo "###SL: prj_root_p = ${env.PRJ_ROOT_P}"
                            echo "###SL: WS = ${env.WORKSPACE}"
                            echo "###SL: current path `pwd`"
                            """
                   )
                 sh(
                     label: 'cleanup (if needed)',
                     script: """
                            cd ${env.WORKSPACE}
                            rm -rf ./build
                            rm -rf ./dist
                            rm -rf ./debug
                            rm -rf .generated_files/
                            rm -rf nbproject/Makefile-*
                            rm -rf nbproject/Package-samd21xplp.bash
                            rm -rf nbproject/private
                            """
                 )
                 sh(
                     label: 'Generate build makefiles',
                     script: """
                            echo "###SL: re-creating makefiles for ${env.PRJ_MK_STR}"
                            prjMakefilesGenerator.sh -v -f ${PRJ_WS_REL_P}@${env.MPLABX_CFG_N}
                            """
                 )
                 sh(
                     label: 'compile = running Makefile',
                     script: """
                             cd "${env.PRJ_WS_REL_P}"
                             echo "###SL: current path `pwd`"
                             make clean
                             make CONF="${env.MPLABX_CFG_N}"
                             """
                 )
                 sh(
                     label: 'compile successful?',
                     script: """
                             cd "${env.PRJ_WS_REL_P}"
                             ${ELF_TEST_SCR}
                             """
                 )
            } //-end 'steps' in 'stage=build'
        } //-end stage=build       

        stage('HWtest_mdbbat') {
//           agent {
//               //dockerfile  {
//               //    label 'docker'
//               //    filename 'Dockerfile'
//               //    registryUrl "https://hub.docker.com/"
//               //}
//           }
            environment {
                 //-paths (Lnx-style with '/' instead of '\'!) relativ from Jenkins-WS:
                 //-    CICDgh_samd21xplp/
                 //-        |-CICDgh_samd21xplp/    == ${PRJ_DIR_N}
                 //-        |   |-firmware/
                 //-        |   |   |-CICDgh_samd21xplp.X/     == ${PRJ_X_NAME} -> ${PRJ_WS_REL_P}
                 //-        |   |   |-src/
                 //-        |   |-mdb/
                 //-        |-Jenkinsfile*
                 //-        |-Dockerfile
                 //-        |-Doxygen
                 //-        |-LICENSE
                 //-        |-.gitignore
                 //-        |-README.md                 
                MDBBAT_SCRIPT_P = "./" + "${PRJ_DIR_N}" + "/" + "mdb"              
                MDBBAT_SCR = 'CICDgh_samd21xplp_test2_mdbbat'
                MDBBAT_SCRIPT_N = "${MDBBAT_SCR}" + ".txt"
                MDBBAT_SCRIPT_F = "${MDBBAT_SCRIPT_P}" + "/" + "${MDBBAT_SCRIPT_N}"
                MDBBAT_LOG_N    = "${MDBBAT_SCR}" + ".log"
                MDBBAT_LOG_F    = "${MDBBAT_SCRIPT_P}" + "/" + "${MDBBAT_LOG_N}"
                COMP_TYPE       = "production"
                //-                         <prj.X>/dist/samd21xplp/production/CICDgit_samd21xplp.X.production.elf
                //-                         <prj.X>        /dist/      samd21xplp/           production/   CICDgit_samd21xplp.X   .   production      .     elf
                MDBBAT_ELF2USE_P_N  = "${PRJ_WS_REL_P}" + "/dist/" + "${MPLABX_CFG_N}/" + "${COMP_TYPE}/" + "${PRJ_X_NAME}" + "." + "${COMP_TYPE}" + "." + "elf"
                //->don't need to spec here, as defined in mdb.bat-cmdfile
            }
            steps {
                sh(
                    label: 'Run on HW with MDB',
                    script: """
                            echo "###SL: current path `pwd`"
                            echo "###SL: run ${env.MDBBAT_SCRIPT_F} with ${env.MDBBAT_ELF2USE_P_N}"
                            mdb.sh ${env.MDBBAT_SCRIPT_F} | tee ${MDBBAT_LOG_F}
                            """
                )
                sh(
                    label: 'Check MDB run resultlog',
                    script: """
                            echo "###SL: current path `pwd`"
                            echo "###SL: mdb-run result check - simple cat logfile"
                            cat ${MDBBAT_LOG_F}
                            """
                )
            }
        } //-end 'stage: HWtest_mdbbat'
 
 
    } //-end 'stages'
    
    post {
        // Optional: Add success build steps here.
        // success {
        //
        // }
        always {
            // Clean workspace after build
            echo "post / always: ..."
            //cleanWs()   //-Jenkins-buildin fct to cleanup Workspace
        }
    }  //-end 'post'

} //- end 'pipeline'
